Practical : 7

Aim: Write a program to implement the MD5 algorithm compute the message digest.

Theory: The MD5 hashing algorithm is a one-way cryptographic function that accepts a message of any length as input and returns as output a fixed-length digest value to be used for authenticating the original message. MD5 processes a variable-length message into a fixed-length output of 128 bits. The input message is broken up into chunks of 512-bit blocks (sixteen 32-bit words); the message is padded so that its length is divisible by 512. The padding works as follows: first a single bit, 1, is appended to the end of the message. This is followed by as many zeros as are required to bring the length of the message up to 64 bits fewer than a multiple of 512. The remaining bits are filled up with 64 bits representing the length of the original message, modulo 264.

Program:
import java.util.Scanner;
import javax.xml.bind.DatatypeConverter;
import java.security.MessageDigest;
public class MD5 {
public static void main(String[] args) {
Scanner sn=new Scanner(System.in);
System.out.print("Please Enter Data for which MD5 is required:");
String data=sn.nextLine();
MD5 md=new MD5();
String hash=md.getMD5Hash(data);
System.out.println("The MD5 (hexadecimalencoded)hash is:"+hash);
}
private String getMD5Hash(String data){
String result=null;
try{
MessageDigest digest=MessageDigest.getInstance("MD5");
byte[] hash=digest.digest(data.getBytes("UTF-8"));
return bytesToHex(hash);
}
catch(Exception ex){
ex.printStackTrace();
}
return result;
}
private String bytesToHex(byte[] hash){
return DatatypeConverter.printHexBinary(hash);
}
}
Output: