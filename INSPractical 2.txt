Practical:2
Aim: Write programs to implement the following Substitution Cipher Techniques: 
         	- Vernam Cipher     
     - Playfair Cipher

1)Vernam Cipher:
Vernam cipher is a symmetrical stream cipher in which the plaintext is combined with a One-Time Pad(OTP) of the same length, to generate the ciphertext.
 Assign each letter a numerical value, e.g., "A" is 0, "B" is 1, and so on.
The technique is to combine the key and the message using modular addition. The numerical values of corresponding message and OTP letters are added together, modulo 26. So, if OTP is "XMCKL" and the message is "HELLO", then the coding would be done as follows:
      H       E       L       L       O  = message
      7       4       11      11      14 = message
+    (X)     (M)     (C)     (K)      (L)= OTP
      23     12       2       10      11
----------------------------------------------------------
 = 30      16      13      21      25     = message + OTP
 =  4 (E)  16 (Q)  13 (N)  21 (V)  25 (Z) =(message + OTP) mod 26
      E       Q       N       V       Z   ? ciphertext

If a number is larger than 26, then the remainder after subtraction of 26 is taken in modular arithmetic fashion. This simply means that if the computations "go past" Z, the sequence starts again at A.
Program:
import java.io.*;
public class VernamCipher
{
 public static int getCharValue(char x)
 {
  int y=(int)'a';
  return ((int)x-y);
 }

 public static char getNumberValue(int x)
 {
  int z=x+(int)'a';
  return ((char)z);
 }
 
 public static void main(String args[])throws Exception
 {
 BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
 System.out.println("Enter your plain text:");
 String accept=br.readLine();
 System.out.println("\nEnter your one time pad text:");
 String pad=br.readLine();
 int aval[]=new int[accept.length()];
 int pval[]=new int[pad.length()];
 int initval[]=new int[pad.length()];
  if(pad.length()!=accept.length())
  {
   System.out.println("Invalid one time pad. Application terminates.");
   return;
  }
  for(int i=0;i<accept.length();i++)
  {
   int k=getCharValue(accept.charAt(i));
   aval[i]=k;
  }
  for(int i=0;i<pad.length();i++)
  {
   int k=getCharValue(pad.charAt(i));
   pval[i]=k;
  }
  for(int i=0;i<pad.length();i++)
  {
   initval[i]=aval[i]+pval[i];
   if(initval[i]>25)
    initval[i]-=26;
  }
 System.out.println("\nCipher text is : ");
 String cipher="";
  for(int i=0;i<pad.length();i++)
  {
  cipher+=getNumberValue(initval[i]);  
  }
 System.out.print(cipher);
 }
}

2)Playfair Cipher:
The Playfair cipher uses a 5 by 5 table containing a key word or phrase. Memorization of the keyword and 4 simple rules was all that was required to create the 5 by 5 table and use the cipher.
To generate the key table, one would first fill in the spaces in the table (a modified Polybius square) with the letters of the keyword (dropping any duplicate letters), then fill the remaining spaces with the rest of the letters of the alphabet in order (usually omitting "J" or "Q" to reduce the alphabet to fit; other versions put both "I" and "J" in the same space). The key can be written in the top rows of the table, from left to right, or in some other pattern, such as a spiral beginning in the upper-left-hand corner and ending in the center. The keyword together with the conventions for filling in the 5 by 5 table constitute the cipher key.
To encrypt a message, one would break the message into digrams (groups of 2 letters) such that, for example, "HelloWorld" becomes "HE LL OW OR LD". These digrams will be substituted using the key table. Since encryption requires pairs of letters, messages with an odd number of characters usually append an uncommon letter, such as "X", to complete the final digram. The two letters of the digram are considered opposite corners of a rectangle in the key table. To perform the substitution, apply the following 4 rules, in order, to each pair of letters in the plaintext:
1. If both letters are the same (or only one letter is left), add an "X" after the first letter. Encrypt the new pair and continue. Some variants of Playfair use "Q" instead of "X", but any letter, itself uncommon as a repeated pair, will do.
2. If the letters appear on the same row of your table, replace them with the letters to their immediate right respectively (wrapping around to the left side of the row if a letter in the original pair was on the right side of the row).
3. If the letters appear on the same column of your table, replace them with the letters immediately below respectively (wrapping around to the top side of the column if a letter in the original pair was on the bottom side of the column).
4. If the letters are not on the same row or column, replace them with the letters on the same row respectively but at the other pair of corners of the rectangle defined by the original pair. The order is important – the first letter of the encrypted pair is the one that lies on the same row as the first letter of the plaintext pair.
To decrypt, use the inverse (opposite) of the last 3 rules, and the first as-is (dropping any extra "X"s or "Q"s that do not make sense in the final message when finished).
There are several minor variations of the original Playfair cipher.[10]

Program:
import java.util.*;
class Basic
{
    String allchar="ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    boolean indexofchar(char c)
    {
        for (int i = 0; i < allchar.length(); i++) 
	{
            if(allchar.charAt(i)==c)
            {
                return true;
            }
            
        }
        return false;
    }
}
public class playfair 
{
    
    Basic b=new Basic();
    char keyMatrix[][]=new char[5][5];
    boolean repeat(char c)
    {
        if(!b.indexofchar(c))
        
        {
            return true;
        }
        for (int i = 0; i <keyMatrix.length; i++) 
	{
            for (int j = 0; j < keyMatrix[i].length; j++){
                
                if(keyMatrix[i][j]==c || c=='J')
                {
                    return  true;
                }
                
            }
            
        }
        return false;
    }
    
    void insertKey(String key)
    {
        key=key.toUpperCase();
        key=key.replaceAll("J", "I");
        key=key.replaceAll("", "");
        int a=0,b=0;
        
        for (int k = 0; k < key.length(); k++) {
            
            if(!repeat(key.charAt(k)))
            {
                keyMatrix[a][b++]=key.charAt(k);
                if(b>4)
                {
                    b=0;
                    a++;
                }
            }
        }
        
        char p='A';
        while (a<5) {            
            
            while (b<5) {
                
                if (!repeat(p)) {
                    
                    keyMatrix[a][b++]=p;
                    
                }
                p++;
            }
            b=0;
            a++;
        }
        
        System.err.print("---------------------key matrix");
        for (int i = 0; i < 5; i++) {
            
            System.out.println("");
            for (int j = 0; j < 5; j++) {
                
                System.out.print("\t"+keyMatrix[i][j]);
                
            }
            
        }
        
            System.out.println("\n------------");
    }
    
    int rowpos(char c)
    {
        for (int i = 0; i < keyMatrix.length; i++) {
            
            for (int j = 0; j < keyMatrix[i].length; j++) {
                
                if(keyMatrix[i][j]==c)
                {
                    return  i;
                }
                
            }
        }
            
            return -1;
            
        }
    
    int columnpos(char c)
    {
    
        for (int i = 0; i < keyMatrix.length; i++) {
            
            for (int j = 0; j < keyMatrix[i].length; j++) {
                
                if(keyMatrix[i][j]==c)
                {
                    return j;
                }
            }
            
        }
        return -1;
  
      
    }
    
    String encryptchar(String plain)
    {
        plain=plain.toUpperCase();
        char a=plain.charAt(0),b=plain.charAt(1);
        String ciphertext="";
        int r1,c1,r2,c2;
        r1=rowpos(a);
        c1=columnpos(a);
        r2=rowpos(b);
        c2=columnpos(b);
        
        if(c1==c2)
        {
            ++r1;
            ++r2;
            if(r1>4)
            
            {
                r1=0;
            }
            
            if(r2>4)
            {
                r2=0;
            }
            ciphertext+=keyMatrix[r1][c2];
            ciphertext+=keyMatrix[r2][c1];

        }
        
        else if(r1==r2)
        {
            
            ++c1;
            ++c2;
            if(c1>4)
            
                c1=0;
            
            if(c2>4)
            
                c2=0;
            ciphertext+=keyMatrix[r1][c2];
            ciphertext+=keyMatrix[r2][c1];
        }
        
        else
        {
            ciphertext+=keyMatrix[r1][c2];
            ciphertext+=keyMatrix[r2][c1];
        }
        return ciphertext;
        
    }
    
    String Encrypt(String plaintext,String key)
    {
        insertKey(key);
        String ciphertext="";
        plaintext=plaintext.replaceAll("j", "i");
        plaintext=plaintext.replaceAll("", "");
        plaintext=plaintext.toUpperCase();
        int len=plaintext.length();
        
        if(len/2!=0)
        {
            plaintext+="X";
            ++len;
        }
        
        for (int i = 0; i < len-1; i=i+2) {
            
            ciphertext+=encryptchar(plaintext.substring(i,i+2));
            ciphertext+="";
            
        }
        
        return ciphertext;
    }
    
    String decryptchar(String cipher)
    {
        cipher=cipher.toUpperCase();
        char a=cipher.charAt(0),b=cipher.charAt(1);
        String plainchar="";
        int r1,c1,r2,c2;
        r1=rowpos(a);
        c1=columnpos(a);
        r2=rowpos(b);
        c2=columnpos(b);
        if(c1==c2)
        {
            --r1;
            --r2;
            if(r1<0)
                r1=4;
            if(r2<0)
                r2=4;
            plainchar+=keyMatrix[r1][c2];
            plainchar+=keyMatrix[r2][c1];
            
        }
        
        
        else if(r1==r2)
        {
            --c1;
            --c2;
            if(c1<0)
                c1=4;
            if(c2<0)
                c2=4;
            plainchar+=keyMatrix[r1][c1];
            plainchar+=keyMatrix[r2][c2];
        }
        else
        {
            plainchar+=keyMatrix[r1][c2];
            plainchar+=keyMatrix[r2][c1];
        }
        
        return plainchar;
    }
    
    String Decrypt(String ciphertext,String key)
    {
        String plaintext="";
        ciphertext=ciphertext.replaceAll("j", "i");
        ciphertext=ciphertext.replaceAll("", "");
        ciphertext=ciphertext.toUpperCase();
        int len=ciphertext.length();
        for (int i = 0; i < len-1; i=i+2) {
            
            plaintext+=decryptchar(ciphertext.substring(i,i+2));
            plaintext+="";
            
            
        }
        
        return plaintext;
       
    }
    
    public static void main(String[] args) {
        playfair p=new playfair();
        Scanner sc=new Scanner(System.in);
        String key,ciphertext,plaintext;
        
        System.out.println("Enter plaintext:");
        plaintext=sc.nextLine();
        System.out.println("Enter key:");
        key=sc.nextLine();
        ciphertext=p.Encrypt(plaintext, key);
        System.out.println("Encrypted text");
        System.out.println("--\n"+ciphertext);
        System.out.println("----");
        String encryptedText=p.Decrypt(ciphertext, key);
        System.out.println("Decrypted text");
        System.out.println("------\n"+encryptedText);
        System.out.println("-------------");
        
    }
}

